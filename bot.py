import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import API_TOKEN, HOT_TEMP_THRESHOLD
from utils import (
    fetch_current_temp,
    calc_water_intake,
    calc_calorie_needs,
    fetch_food_info,
    calc_workout
)
from data_storage import (
    get_user_profile, set_user_profile,
    log_water, log_food, log_workout, get_progress
)

logging.basicConfig(level=logging.INFO)
bot = Bot(API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class FoodForm(StatesGroup):
    waiting_for_grams = State()

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "üëã –ë–æ—Ç –≥–æ—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/profile ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/water ‚Äî —Ä–∞—Å—á—ë—Ç –≤–æ–¥—ã\n"
        "/calories ‚Äî —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π\n"
        "/log_water <–º–ª> ‚Äî –ª–æ–≥ –≤–æ–¥—ã\n"
        "/log_food <–ø—Ä–æ–¥—É–∫—Ç> ‚Äî –ª–æ–≥ –µ–¥—ã\n"
        "/log_workout <—Ç–∏–ø> <–º–∏–Ω> ‚Äî –ª–æ–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/check_progress ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )

@dp.message(Command("profile"))
async def profile_request(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–æ–ª; –≤–æ–∑—Ä–∞—Å—Ç; –≤–µ—Å(–∫–≥); —Ä–æ—Å—Ç(—Å–º)\n"
        "–ü—Ä–∏–º–µ—Ä: male;30;75;180"
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ª—é–±–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å 3 ';'
@dp.message(F.text.regexp(r'^[^;]+;\s*\d+;\s*\d+;\s*\d+$'))
async def set_profile(message: Message):
    sex, age, weight, height = [x.strip() for x in message.text.split(";")]
    set_user_profile(str(message.from_user.id), {
        'sex': sex,
        'age': int(age),
        'weight': float(weight),
        'height': float(height)
    })
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@dp.message(Command("water"))
async def water_request(message: Message):
    prof = get_user_profile(str(message.from_user.id))
    if not prof:
        return await message.reply('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile')
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ: –≥–æ—Ä–æ–¥; –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "–ü—Ä–∏–º–µ—Ä: Tashkent;45"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –∏ –º–∏–Ω—É—Ç –¥–ª—è –≤–æ–¥—ã
@dp.message(lambda m: m.text and ";" in m.text and not m.text.startswith("/"))
async def water_calc_handler(message: Message):
    try:
        city, mins = [s.strip() for s in message.text.split(';', 1)]
        temp = await fetch_current_temp(city)
        prof = get_user_profile(str(message.from_user.id))
        goal = calc_water_intake(prof['weight'], int(mins), temp)
        await message.answer(
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
            f"üíß –¶–µ–ª—å –≤–æ–¥—ã: {goal} –º–ª"
        )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤–æ–¥—ã: {e}")

@dp.message(Command("calories"))
async def calories_request(message: Message):
    prof = get_user_profile(str(message.from_user.id))
    if not prof:
        return await message.reply('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile')
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: low, medium, high"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π
@dp.message(lambda m: m.text and m.text.lower() in ['low','medium','high'])
async def calories_calc_handler(message: Message):
    prof = get_user_profile(str(message.from_user.id))
    cals = calc_calorie_needs(
        prof['weight'], prof['height'], prof['age'], prof['sex'], message.text.lower()
    )
    await message.answer(f"üî• –í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {cals} –∫–∫–∞–ª")

@dp.message(Command("log_water"))
async def log_water_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_water <–º–ª>")
        return
    amount = int(args[1])
    uid = str(message.from_user.id)
    log_water(uid, amount)
    prof = get_user_profile(uid)
    goal = calc_water_intake(prof['weight'], 0, HOT_TEMP_THRESHOLD)
    prog = get_progress(uid, goal, 0)
    left = prog['water']['goal'] - prog['water']['drank']
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª. –û—Å—Ç–∞–ª–æ—Å—å: {left} –º–ª")

@dp.message(Command("log_food"))
async def log_food_handler(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_food <–ø—Ä–æ–¥—É–∫—Ç>")
        return
    product = args[1]
    name, kcal100 = await fetch_food_info(product)
    if kcal100 == 0:
        await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await state.update_data(name=name, kcal100=kcal100)
    await message.answer(f"üçé {name} ‚Äî {kcal100} –∫–∫–∞–ª/100–≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º?")
    await state.set_state(FoodForm.waiting_for_grams)

@dp.message(FoodForm.waiting_for_grams)
async def food_grams(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        grams = float(message.text)
        kcal = grams * data['kcal100'] / 100
        log_food(str(message.from_user.id), data['name'], kcal)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {kcal:.1f} –∫–∫–∞–ª –∏–∑ {grams:.0f} –≥ {data['name']}")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö!")
    await state.clear()

@dp.message(Command("log_workout"))
async def log_workout_handler(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) != 3 or not args[2].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã>")
        return
    typ, mins = args[1], int(args[2])
    kcal, water = calc_workout(typ, mins)
    log_workout(str(message.from_user.id), typ, mins, kcal, water)
    await message.answer(f"üèÉ {typ} ‚Äî {mins} –º–∏–Ω ‚Äî {kcal} –∫–∫–∞–ª. –î–æ–ø. –≤–æ–¥–∞: {water} –º–ª")

@dp.message(Command("check_progress"))
async def check_progress_handler(message: Message):
    uid = str(message.from_user.id)
    prof = get_user_profile(uid)
    water_goal = calc_water_intake(prof['weight'], 0, HOT_TEMP_THRESHOLD)
    cal_goal = calc_calorie_needs(prof['weight'], prof['height'], prof['age'], prof['sex'], 'medium')
    prog = get_progress(uid, water_goal, cal_goal)
    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        f"üíß –í–æ–¥–∞: {prog['water']['drank']} –º–ª –∏–∑ {water_goal} –º–ª\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: —Å—ä–µ–¥–µ–Ω–æ {prog['calories']['eaten']} –∫–∫–∞–ª, —Å–æ–∂–∂–µ–Ω–æ {prog['calories']['burned']} –∫–∫–∞–ª\n"
        f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {prog['calories']['eaten'] - prog['calories']['burned']} –∫–∫–∞–ª"
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤ –∫–æ–Ω—Ü–µ)
@dp.message()
async def default_handler(message: Message):
    await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())